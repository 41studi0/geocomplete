{"name":"Geocomplete","body":"# $.geocomplete() - Version 1.2\r\n## jQuery Geocoding and Places Autocomplete Plugin\r\n\r\nAn advanced jQuery plugin that wraps the Google Maps API's [Geocoding](https://code.google.com/apis/maps/documentation/javascript/geocoding.html) and [Places Autocomplete](https://code.google.com/apis/maps/documentation/javascript/places.html#places_autocomplete) services. You simply provide an input that lets you search for locations with a nice autocomplete dropdown. Optionally add a container to show an interactive map and a form that will be populated with the address details.\r\n\r\nView the [annotated source](http://ubilabs.github.com/geocomplete/docs/).\r\n\r\n## Basic Usage\r\n\r\nTo convert an input into an autocomplete field, simply call the Geocomplete plugin:\r\n\r\n```javascript\r\n$(\"input\").geocomplete();  // Option 1: Call on element.\r\n$.fn.geocomplete(\"input\"); // Option 2: Pass element as argument.\r\n```\r\n\r\n## Examples\r\n\r\nHere is a list of basic uses:\r\n\r\n* [Simple](http://ubilabs.github.com/geocomplete/examples/simple.html) - Single input with an event logger.\r\n* [Map](http://ubilabs.github.com/geocomplete/examples/map.html) - Adding a map.\r\n* [Location](http://ubilabs.github.com/geocomplete/examples/location.html) - Adding a default location.\r\n* [Form](http://ubilabs.github.com/geocomplete/examples/form.html) - Populate form fields.\r\n* [Attribute](http://ubilabs.github.com/geocomplete/examples/custom_attribute.html) - Using custom attributes to populate data.\r\n* [Multiple results](http://ubilabs.github.com/geocomplete/examples/multiple_results.html) - Handling multiple results from the geocoder.\r\n* [Draggable](http://ubilabs.github.com/geocomplete/examples/draggable.html) -  A draggable marker to redifine the position.\r\n\r\n## Requirements\r\n\r\nMake sure you include the Google Maps API with the Places Library before loading this plugin as described [here](http://code.google.com/intl/de-DE/apis/maps/documentation/javascript/places.html#loading_the_library).\r\n\r\n````html\r\n<script src=\"http://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places\"></script>\r\n<script src=\"jquery.geocomplete.js\"></script>\r\n```\r\n\r\n## Trigger Request\r\n\r\nTo trigger a geocoding request from outside (eg. when hitting the \"find\" button), simply trigger the \"geocode\" event on the element.\r\n\r\n````javascript\r\n$(\"input\").geocomplete();\r\n\r\n// Trigger geocoding request.\r\n$(\"button.find\").click(function(){\r\n  $(\"input\").trigger(\"geocode\");\r\n});\r\n```\r\n\r\n## Adding a Map Preview\r\n\r\nTo link the geocode results with an interactive map, you can pass `map` as an option to the plugin.\r\n\r\n```javascript\r\n$(\"#my_input\").geocomplete({\r\n  map: \"#my_map\"\r\n});\r\n```\r\n\r\nThe `map` option might be a selector, a jQuery object or a DOM element.\r\n\r\n## Populate Form Data\r\n\r\nYou can pass `details` as an option to specify a cointainer that will be populated when a geocoding request was successfull.\r\n\r\nBy default the plugin analyses the `name` attribute of the containers child nodes and replaces the content. You can override the `detailsAttribute` to use another attribute such as `data-geo`.\r\n\r\nIf the element is an input, the value will be replaced otherwise the plugin overrides the current text.\r\n\r\n**Note**: Some address compontents such as \"country\" return an additional `short_name`. You can access them by simply adding `_short` at the end of the type.\r\n\r\nSimple Example:\r\n\r\n```html\r\n<form>\r\n  Latitude:   <input name=\"lat\" type=\"text\" value=\"\">\r\n  Longitude:  <input name=\"lng\" type=\"text\" value=\"\">\r\n  Address:    <input name=\"formatted_address\" type=\"text\" value=\"\">\r\n</form>\r\n```\r\n\r\n```javascript\r\n$(\"input\").geocomplete({ details: \"form\" });\r\n```\r\n\r\nAdvanced Example:\r\n\r\n```html\r\n<div class=\"details\">\r\n  Latitude:     <span data-geo=\"lat\" />\r\n  Longitude:    <span data-geo=\"lng\" />\r\n  Address:      <span data-geo=\"formatted_address\" />\r\n  Country Code: <span data-geo=\"country_short\" />\r\n</form>\r\n```\r\n\r\n```javascript\r\n$(\"input\").geocomplete({\r\n  details: \".details\",\r\n  detailsAttribute: \"data-geo\"\r\n});\r\n```\r\n\r\n## List of Options\r\n\r\nThe following options might be passed to the plugin call. If you omit them, they fall back to the default.\r\n\r\nExample:\r\n\r\n```javascript\r\n$(\"#my_input\").geocomplete({\r\n  map: \"#my_map\",\r\n  mapOptions: {\r\n    zoom: 10\r\n  },\r\n  markerOptions: {\r\n    draggable: true\r\n  },\r\n  details: \"#my_form\"\r\n});\r\n```\r\n\r\n* `map` - Might be a selector, a jQuery object or a DOM element. Default is `false` which shows no map.\r\n* `details` - The container that should be populated with data. Defaults to `false` which ignores the setting.\r\n* `location` - Location to initialize the map on. Might be an address `string` or an `array` with [latitude, longitude] or a `google.maps.LatLng`object. Default is `false` which shows a blank map.\r\n* `bounds` - Whether to snap geocode search to map bounds. Default: `true` if false search globally. Alternatively pass a custom LatLngBounds object\r\n* `detailsAttribute` - The attribute's name to use as an indicator. Default: `\"name\"`\r\n* `mapOptions` - Options to pass to the `google.maps.Map` constructor. See the full list [here](http://code.google.com/apis/maps/documentation/javascript/reference.html#MapOptions).\r\n* `mapOptions.zoom` - The inital zoom level. Default: `14`\r\n* `mapOptions.scrollwheel` - Whether to enable the scrollwheel to zoom the map. Default: `false`\r\n* `mapOptions.mapTypeId` - The map type. Default: `\"roadmap\"`\r\n* `markerOptions` - The options to pass to the `google.maps.Marker` constructor. See the full list [here](http://code.google.com/apis/maps/documentation/javascript/reference.html#MarkerOptions).\r\n* `markerOptions.draggable` - If the marker is draggable. Default: `false`. Set to true to enable dragging.\r\n* `maxZoom` - The maximum zoom level to zoom in after a geocoding response. Default: `16`\r\n* `types` - An array containing one or more of the supported types for the places request. Default: `['geocode']` See the full list [here](http://code.google.com/apis/maps/documentation/javascript/places.html#place_search_requests).\r\n\r\n## Events\r\n\r\nYou can subscribe to events of the geocode plugin by using the default jQuery syntax:\r\n\r\n````javascript\r\n$(\"input\")\r\n  .geocomplete()\r\n  .bind(\"geocode:result\", function(event, result){\r\n    console.log(result);\r\n  });\r\n```\r\n\r\nThe following events are supported:\r\n\r\n* `\"geocode:result\"` - Geocode was successful. Passes the original result as described [here](http://code.google.com/apis/maps/documentation/javascript/geocoding.html#GeocodingResults).\r\n* `\"geocode:error\"` - Fired when the geocode returns an error. Passes the current status as listed [here](http://code.google.com/apis/maps/documentation/javascript/geocoding.html#GeocodingStatusCodes).\r\n* `\"geocode:multiple\"` - Fired immediately after the \"result\" event if multiple results were found. Passes an array of all results.\r\n* `\"geocode:dragged\"` - Fired when the marker's position was modified manually. Passes the updated location.\r\n\r\n## Methods and Properties\r\n\r\nYou can access all properties and methods of the plugin from outside. Simply add a string as the first argument to the `.geocomplete` method after you initialized the plugin.\r\n\r\nExample:\r\n\r\n````javascript\r\n// Initialize the plugin.\r\n$(\"input\").geocomplete({ map: \".map_canvas\" });\r\n\r\n// Call the find method with the paramenter \"NYC\".\r\n$(\"input\").geocomplete(\"find\", \"NYC\");\r\n\r\n// Get the map and set a new zoom level.\r\nvar map = $(\"input\").geocomplete(\"map\");\r\nmap.setZoom(3);\r\n```\r\n\r\n## Address and Places Specific Component Types\r\n\r\nThe following types are supported by the geocoder and will be passed to the provided form or container:\r\n\r\n`street_address`, `route`, `intersection`, `political`, `country`, `administrative_area_level_1`, `administrative_area_level_2`, `administrative_area_level_3`, `colloquial_area`, `locality`, `sublocality`, `neighborhood`, `premise`, `subpremise`, `postal_code`, `natural_feature`, `airport`, `park`, `point_of_interest`, `post_box`, `street_number`, `floor`, `room`, `lat`, `lng`, `viewport`, `location`, `formatted_address`, `location_type`, `bounds`\r\n\r\nFor more information about address components visit http://code.google.com/apis/maps/documentation/geocoding/#Types\r\n\r\n\r\nAdditionally the following details are passed when the Places API was requested:\r\n\r\n`id`, `url`, `website`, `vicinity`, `reference`, `rating`, `international_phone_number`, `icon`, `formatted_phone_number`\r\n\r\nMore information can be found here: https://developers.google.com/maps/documentation/javascript/places#place_details_responses\r\n\r\n\r\n## About\r\n\r\nDeveloped by [Martin Kleppe](http://twitter.com/aemkei) at [Ubilabs](http://ubilabs.net).","tagline":"jQuery Geocoding and Places Autocomplete Plugin","google":"UA-57649-7","note":"Don't delete this file! It's used internally to help with page regeneration."}